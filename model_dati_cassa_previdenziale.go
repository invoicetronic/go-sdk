/*
Italian eInvoice API v1

The [Italian eInvoice API][2] is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"encoding/json"
)

// checks if the DatiCassaPrevidenziale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatiCassaPrevidenziale{}

// DatiCassaPrevidenziale struct for DatiCassaPrevidenziale
type DatiCassaPrevidenziale struct {
	TipoCassa NullableString `json:"tipo_cassa,omitempty"`
	AlCassa *float64 `json:"al_cassa,omitempty"`
	ImportoContributoCassa *float64 `json:"importo_contributo_cassa,omitempty"`
	ImponibileCassa *float64 `json:"imponibile_cassa,omitempty"`
	AliquotaIva *float64 `json:"aliquota_iva,omitempty"`
	Ritenuta NullableString `json:"ritenuta,omitempty"`
	Natura NullableString `json:"natura,omitempty"`
	RiferimentoAmministrazione NullableString `json:"riferimento_amministrazione,omitempty"`
}

// NewDatiCassaPrevidenziale instantiates a new DatiCassaPrevidenziale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatiCassaPrevidenziale() *DatiCassaPrevidenziale {
	this := DatiCassaPrevidenziale{}
	return &this
}

// NewDatiCassaPrevidenzialeWithDefaults instantiates a new DatiCassaPrevidenziale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatiCassaPrevidenzialeWithDefaults() *DatiCassaPrevidenziale {
	this := DatiCassaPrevidenziale{}
	return &this
}

// GetTipoCassa returns the TipoCassa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiCassaPrevidenziale) GetTipoCassa() string {
	if o == nil || IsNil(o.TipoCassa.Get()) {
		var ret string
		return ret
	}
	return *o.TipoCassa.Get()
}

// GetTipoCassaOk returns a tuple with the TipoCassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiCassaPrevidenziale) GetTipoCassaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TipoCassa.Get(), o.TipoCassa.IsSet()
}

// HasTipoCassa returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasTipoCassa() bool {
	if o != nil && o.TipoCassa.IsSet() {
		return true
	}

	return false
}

// SetTipoCassa gets a reference to the given NullableString and assigns it to the TipoCassa field.
func (o *DatiCassaPrevidenziale) SetTipoCassa(v string) {
	o.TipoCassa.Set(&v)
}
// SetTipoCassaNil sets the value for TipoCassa to be an explicit nil
func (o *DatiCassaPrevidenziale) SetTipoCassaNil() {
	o.TipoCassa.Set(nil)
}

// UnsetTipoCassa ensures that no value is present for TipoCassa, not even an explicit nil
func (o *DatiCassaPrevidenziale) UnsetTipoCassa() {
	o.TipoCassa.Unset()
}

// GetAlCassa returns the AlCassa field value if set, zero value otherwise.
func (o *DatiCassaPrevidenziale) GetAlCassa() float64 {
	if o == nil || IsNil(o.AlCassa) {
		var ret float64
		return ret
	}
	return *o.AlCassa
}

// GetAlCassaOk returns a tuple with the AlCassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiCassaPrevidenziale) GetAlCassaOk() (*float64, bool) {
	if o == nil || IsNil(o.AlCassa) {
		return nil, false
	}
	return o.AlCassa, true
}

// HasAlCassa returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasAlCassa() bool {
	if o != nil && !IsNil(o.AlCassa) {
		return true
	}

	return false
}

// SetAlCassa gets a reference to the given float64 and assigns it to the AlCassa field.
func (o *DatiCassaPrevidenziale) SetAlCassa(v float64) {
	o.AlCassa = &v
}

// GetImportoContributoCassa returns the ImportoContributoCassa field value if set, zero value otherwise.
func (o *DatiCassaPrevidenziale) GetImportoContributoCassa() float64 {
	if o == nil || IsNil(o.ImportoContributoCassa) {
		var ret float64
		return ret
	}
	return *o.ImportoContributoCassa
}

// GetImportoContributoCassaOk returns a tuple with the ImportoContributoCassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiCassaPrevidenziale) GetImportoContributoCassaOk() (*float64, bool) {
	if o == nil || IsNil(o.ImportoContributoCassa) {
		return nil, false
	}
	return o.ImportoContributoCassa, true
}

// HasImportoContributoCassa returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasImportoContributoCassa() bool {
	if o != nil && !IsNil(o.ImportoContributoCassa) {
		return true
	}

	return false
}

// SetImportoContributoCassa gets a reference to the given float64 and assigns it to the ImportoContributoCassa field.
func (o *DatiCassaPrevidenziale) SetImportoContributoCassa(v float64) {
	o.ImportoContributoCassa = &v
}

// GetImponibileCassa returns the ImponibileCassa field value if set, zero value otherwise.
func (o *DatiCassaPrevidenziale) GetImponibileCassa() float64 {
	if o == nil || IsNil(o.ImponibileCassa) {
		var ret float64
		return ret
	}
	return *o.ImponibileCassa
}

// GetImponibileCassaOk returns a tuple with the ImponibileCassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiCassaPrevidenziale) GetImponibileCassaOk() (*float64, bool) {
	if o == nil || IsNil(o.ImponibileCassa) {
		return nil, false
	}
	return o.ImponibileCassa, true
}

// HasImponibileCassa returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasImponibileCassa() bool {
	if o != nil && !IsNil(o.ImponibileCassa) {
		return true
	}

	return false
}

// SetImponibileCassa gets a reference to the given float64 and assigns it to the ImponibileCassa field.
func (o *DatiCassaPrevidenziale) SetImponibileCassa(v float64) {
	o.ImponibileCassa = &v
}

// GetAliquotaIva returns the AliquotaIva field value if set, zero value otherwise.
func (o *DatiCassaPrevidenziale) GetAliquotaIva() float64 {
	if o == nil || IsNil(o.AliquotaIva) {
		var ret float64
		return ret
	}
	return *o.AliquotaIva
}

// GetAliquotaIvaOk returns a tuple with the AliquotaIva field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiCassaPrevidenziale) GetAliquotaIvaOk() (*float64, bool) {
	if o == nil || IsNil(o.AliquotaIva) {
		return nil, false
	}
	return o.AliquotaIva, true
}

// HasAliquotaIva returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasAliquotaIva() bool {
	if o != nil && !IsNil(o.AliquotaIva) {
		return true
	}

	return false
}

// SetAliquotaIva gets a reference to the given float64 and assigns it to the AliquotaIva field.
func (o *DatiCassaPrevidenziale) SetAliquotaIva(v float64) {
	o.AliquotaIva = &v
}

// GetRitenuta returns the Ritenuta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiCassaPrevidenziale) GetRitenuta() string {
	if o == nil || IsNil(o.Ritenuta.Get()) {
		var ret string
		return ret
	}
	return *o.Ritenuta.Get()
}

// GetRitenutaOk returns a tuple with the Ritenuta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiCassaPrevidenziale) GetRitenutaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ritenuta.Get(), o.Ritenuta.IsSet()
}

// HasRitenuta returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasRitenuta() bool {
	if o != nil && o.Ritenuta.IsSet() {
		return true
	}

	return false
}

// SetRitenuta gets a reference to the given NullableString and assigns it to the Ritenuta field.
func (o *DatiCassaPrevidenziale) SetRitenuta(v string) {
	o.Ritenuta.Set(&v)
}
// SetRitenutaNil sets the value for Ritenuta to be an explicit nil
func (o *DatiCassaPrevidenziale) SetRitenutaNil() {
	o.Ritenuta.Set(nil)
}

// UnsetRitenuta ensures that no value is present for Ritenuta, not even an explicit nil
func (o *DatiCassaPrevidenziale) UnsetRitenuta() {
	o.Ritenuta.Unset()
}

// GetNatura returns the Natura field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiCassaPrevidenziale) GetNatura() string {
	if o == nil || IsNil(o.Natura.Get()) {
		var ret string
		return ret
	}
	return *o.Natura.Get()
}

// GetNaturaOk returns a tuple with the Natura field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiCassaPrevidenziale) GetNaturaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Natura.Get(), o.Natura.IsSet()
}

// HasNatura returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasNatura() bool {
	if o != nil && o.Natura.IsSet() {
		return true
	}

	return false
}

// SetNatura gets a reference to the given NullableString and assigns it to the Natura field.
func (o *DatiCassaPrevidenziale) SetNatura(v string) {
	o.Natura.Set(&v)
}
// SetNaturaNil sets the value for Natura to be an explicit nil
func (o *DatiCassaPrevidenziale) SetNaturaNil() {
	o.Natura.Set(nil)
}

// UnsetNatura ensures that no value is present for Natura, not even an explicit nil
func (o *DatiCassaPrevidenziale) UnsetNatura() {
	o.Natura.Unset()
}

// GetRiferimentoAmministrazione returns the RiferimentoAmministrazione field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiCassaPrevidenziale) GetRiferimentoAmministrazione() string {
	if o == nil || IsNil(o.RiferimentoAmministrazione.Get()) {
		var ret string
		return ret
	}
	return *o.RiferimentoAmministrazione.Get()
}

// GetRiferimentoAmministrazioneOk returns a tuple with the RiferimentoAmministrazione field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiCassaPrevidenziale) GetRiferimentoAmministrazioneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RiferimentoAmministrazione.Get(), o.RiferimentoAmministrazione.IsSet()
}

// HasRiferimentoAmministrazione returns a boolean if a field has been set.
func (o *DatiCassaPrevidenziale) HasRiferimentoAmministrazione() bool {
	if o != nil && o.RiferimentoAmministrazione.IsSet() {
		return true
	}

	return false
}

// SetRiferimentoAmministrazione gets a reference to the given NullableString and assigns it to the RiferimentoAmministrazione field.
func (o *DatiCassaPrevidenziale) SetRiferimentoAmministrazione(v string) {
	o.RiferimentoAmministrazione.Set(&v)
}
// SetRiferimentoAmministrazioneNil sets the value for RiferimentoAmministrazione to be an explicit nil
func (o *DatiCassaPrevidenziale) SetRiferimentoAmministrazioneNil() {
	o.RiferimentoAmministrazione.Set(nil)
}

// UnsetRiferimentoAmministrazione ensures that no value is present for RiferimentoAmministrazione, not even an explicit nil
func (o *DatiCassaPrevidenziale) UnsetRiferimentoAmministrazione() {
	o.RiferimentoAmministrazione.Unset()
}

func (o DatiCassaPrevidenziale) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatiCassaPrevidenziale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TipoCassa.IsSet() {
		toSerialize["tipo_cassa"] = o.TipoCassa.Get()
	}
	if !IsNil(o.AlCassa) {
		toSerialize["al_cassa"] = o.AlCassa
	}
	if !IsNil(o.ImportoContributoCassa) {
		toSerialize["importo_contributo_cassa"] = o.ImportoContributoCassa
	}
	if !IsNil(o.ImponibileCassa) {
		toSerialize["imponibile_cassa"] = o.ImponibileCassa
	}
	if !IsNil(o.AliquotaIva) {
		toSerialize["aliquota_iva"] = o.AliquotaIva
	}
	if o.Ritenuta.IsSet() {
		toSerialize["ritenuta"] = o.Ritenuta.Get()
	}
	if o.Natura.IsSet() {
		toSerialize["natura"] = o.Natura.Get()
	}
	if o.RiferimentoAmministrazione.IsSet() {
		toSerialize["riferimento_amministrazione"] = o.RiferimentoAmministrazione.Get()
	}
	return toSerialize, nil
}

type NullableDatiCassaPrevidenziale struct {
	value *DatiCassaPrevidenziale
	isSet bool
}

func (v NullableDatiCassaPrevidenziale) Get() *DatiCassaPrevidenziale {
	return v.value
}

func (v *NullableDatiCassaPrevidenziale) Set(val *DatiCassaPrevidenziale) {
	v.value = val
	v.isSet = true
}

func (v NullableDatiCassaPrevidenziale) IsSet() bool {
	return v.isSet
}

func (v *NullableDatiCassaPrevidenziale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatiCassaPrevidenziale(val *DatiCassaPrevidenziale) *NullableDatiCassaPrevidenziale {
	return &NullableDatiCassaPrevidenziale{value: val, isSet: true}
}

func (v NullableDatiCassaPrevidenziale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatiCassaPrevidenziale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


