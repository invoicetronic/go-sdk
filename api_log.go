/*
Invoicetronic API

The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicetronicsdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// LogAPIService LogAPI service
type LogAPIService service

type ApiLogGetRequest struct {
	ctx context.Context
	ApiService *LogAPIService
	companyId *int32
	endpoint *string
	method *string
	apiVerion *int32
	statusCode *int32
	dateCreatedFrom *time.Time
	dateCreatedTo *time.Time
	page *int32
	pageSize *int32
	sort *string
	query *string
	success *bool
	dateTimeFrom *time.Time
	dateTimeTo *time.Time
}

// Company id
func (r ApiLogGetRequest) CompanyId(companyId int32) ApiLogGetRequest {
	r.companyId = &companyId
	return r
}

func (r ApiLogGetRequest) Endpoint(endpoint string) ApiLogGetRequest {
	r.endpoint = &endpoint
	return r
}

func (r ApiLogGetRequest) Method(method string) ApiLogGetRequest {
	r.method = &method
	return r
}

// Api version
func (r ApiLogGetRequest) ApiVerion(apiVerion int32) ApiLogGetRequest {
	r.apiVerion = &apiVerion
	return r
}

// Response status code
func (r ApiLogGetRequest) StatusCode(statusCode int32) ApiLogGetRequest {
	r.statusCode = &statusCode
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiLogGetRequest) DateCreatedFrom(dateCreatedFrom time.Time) ApiLogGetRequest {
	r.dateCreatedFrom = &dateCreatedFrom
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiLogGetRequest) DateCreatedTo(dateCreatedTo time.Time) ApiLogGetRequest {
	r.dateCreatedTo = &dateCreatedTo
	return r
}

// Page number. Defaults to 1.
func (r ApiLogGetRequest) Page(page int32) ApiLogGetRequest {
	r.page = &page
	return r
}

// Items per page. Defaults to 50. Cannot be greater than 200.
func (r ApiLogGetRequest) PageSize(pageSize int32) ApiLogGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sort by field. Prefix with &#39;-&#39; for descending order.
func (r ApiLogGetRequest) Sort(sort string) ApiLogGetRequest {
	r.sort = &sort
	return r
}

func (r ApiLogGetRequest) Query(query string) ApiLogGetRequest {
	r.query = &query
	return r
}

func (r ApiLogGetRequest) Success(success bool) ApiLogGetRequest {
	r.success = &success
	return r
}

// Date and time of the event
func (r ApiLogGetRequest) DateTimeFrom(dateTimeFrom time.Time) ApiLogGetRequest {
	r.dateTimeFrom = &dateTimeFrom
	return r
}

// Date and time of the event
func (r ApiLogGetRequest) DateTimeTo(dateTimeTo time.Time) ApiLogGetRequest {
	r.dateTimeTo = &dateTimeTo
	return r
}

func (r ApiLogGetRequest) Execute() ([]Event, *http.Response, error) {
	return r.ApiService.LogGetExecute(r)
}

/*
LogGet List events

Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLogGetRequest
*/
func (a *LogAPIService) LogGet(ctx context.Context) ApiLogGetRequest {
	return ApiLogGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Event
func (a *LogAPIService) LogGetExecute(r ApiLogGetRequest) ([]Event, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogAPIService.LogGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company_id", r.companyId, "form", "")
	}
	if r.endpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint", r.endpoint, "form", "")
	}
	if r.method != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "method", r.method, "form", "")
	}
	if r.apiVerion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api_verion", r.apiVerion, "form", "")
	}
	if r.statusCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status_code", r.statusCode, "form", "")
	}
	if r.dateCreatedFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_created_from", r.dateCreatedFrom, "form", "")
	}
	if r.dateCreatedTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_created_to", r.dateCreatedTo, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "form", "")
	}
	if r.success != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "success", r.success, "form", "")
	}
	if r.dateTimeFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_time_from", r.dateTimeFrom, "form", "")
	}
	if r.dateTimeTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_time_to", r.dateTimeTo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemHttpResult
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLogIdGetRequest struct {
	ctx context.Context
	ApiService *LogAPIService
	id int32
}

func (r ApiLogIdGetRequest) Execute() (*Event, *http.Response, error) {
	return r.ApiService.LogIdGetExecute(r)
}

/*
LogIdGet Get an event by id

Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item id
 @return ApiLogIdGetRequest
*/
func (a *LogAPIService) LogIdGet(ctx context.Context, id int32) ApiLogIdGetRequest {
	return ApiLogIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Event
func (a *LogAPIService) LogIdGetExecute(r ApiLogIdGetRequest) (*Event, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogAPIService.LogIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
