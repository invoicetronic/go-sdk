/*
Invoicetronic API

The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicetronicsdk

import (
	"encoding/json"
	"time"
)

// checks if the DatiDDT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatiDDT{}

// DatiDDT struct for DatiDDT
type DatiDDT struct {
	NumeroDdt NullableString `json:"numero_ddt,omitempty"`
	DataDdt *time.Time `json:"data_ddt,omitempty"`
	RiferimentoNumeroLinea []int32 `json:"riferimento_numero_linea,omitempty"`
}

// NewDatiDDT instantiates a new DatiDDT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatiDDT() *DatiDDT {
	this := DatiDDT{}
	return &this
}

// NewDatiDDTWithDefaults instantiates a new DatiDDT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatiDDTWithDefaults() *DatiDDT {
	this := DatiDDT{}
	return &this
}

// GetNumeroDdt returns the NumeroDdt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiDDT) GetNumeroDdt() string {
	if o == nil || IsNil(o.NumeroDdt.Get()) {
		var ret string
		return ret
	}
	return *o.NumeroDdt.Get()
}

// GetNumeroDdtOk returns a tuple with the NumeroDdt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiDDT) GetNumeroDdtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumeroDdt.Get(), o.NumeroDdt.IsSet()
}

// HasNumeroDdt returns a boolean if a field has been set.
func (o *DatiDDT) HasNumeroDdt() bool {
	if o != nil && o.NumeroDdt.IsSet() {
		return true
	}

	return false
}

// SetNumeroDdt gets a reference to the given NullableString and assigns it to the NumeroDdt field.
func (o *DatiDDT) SetNumeroDdt(v string) {
	o.NumeroDdt.Set(&v)
}
// SetNumeroDdtNil sets the value for NumeroDdt to be an explicit nil
func (o *DatiDDT) SetNumeroDdtNil() {
	o.NumeroDdt.Set(nil)
}

// UnsetNumeroDdt ensures that no value is present for NumeroDdt, not even an explicit nil
func (o *DatiDDT) UnsetNumeroDdt() {
	o.NumeroDdt.Unset()
}

// GetDataDdt returns the DataDdt field value if set, zero value otherwise.
func (o *DatiDDT) GetDataDdt() time.Time {
	if o == nil || IsNil(o.DataDdt) {
		var ret time.Time
		return ret
	}
	return *o.DataDdt
}

// GetDataDdtOk returns a tuple with the DataDdt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiDDT) GetDataDdtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DataDdt) {
		return nil, false
	}
	return o.DataDdt, true
}

// HasDataDdt returns a boolean if a field has been set.
func (o *DatiDDT) HasDataDdt() bool {
	if o != nil && !IsNil(o.DataDdt) {
		return true
	}

	return false
}

// SetDataDdt gets a reference to the given time.Time and assigns it to the DataDdt field.
func (o *DatiDDT) SetDataDdt(v time.Time) {
	o.DataDdt = &v
}

// GetRiferimentoNumeroLinea returns the RiferimentoNumeroLinea field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiDDT) GetRiferimentoNumeroLinea() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.RiferimentoNumeroLinea
}

// GetRiferimentoNumeroLineaOk returns a tuple with the RiferimentoNumeroLinea field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiDDT) GetRiferimentoNumeroLineaOk() ([]int32, bool) {
	if o == nil || IsNil(o.RiferimentoNumeroLinea) {
		return nil, false
	}
	return o.RiferimentoNumeroLinea, true
}

// HasRiferimentoNumeroLinea returns a boolean if a field has been set.
func (o *DatiDDT) HasRiferimentoNumeroLinea() bool {
	if o != nil && !IsNil(o.RiferimentoNumeroLinea) {
		return true
	}

	return false
}

// SetRiferimentoNumeroLinea gets a reference to the given []int32 and assigns it to the RiferimentoNumeroLinea field.
func (o *DatiDDT) SetRiferimentoNumeroLinea(v []int32) {
	o.RiferimentoNumeroLinea = v
}

func (o DatiDDT) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatiDDT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NumeroDdt.IsSet() {
		toSerialize["numero_ddt"] = o.NumeroDdt.Get()
	}
	if !IsNil(o.DataDdt) {
		toSerialize["data_ddt"] = o.DataDdt
	}
	if o.RiferimentoNumeroLinea != nil {
		toSerialize["riferimento_numero_linea"] = o.RiferimentoNumeroLinea
	}
	return toSerialize, nil
}

type NullableDatiDDT struct {
	value *DatiDDT
	isSet bool
}

func (v NullableDatiDDT) Get() *DatiDDT {
	return v.value
}

func (v *NullableDatiDDT) Set(val *DatiDDT) {
	v.value = val
	v.isSet = true
}

func (v NullableDatiDDT) IsSet() bool {
	return v.isSet
}

func (v *NullableDatiDDT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatiDDT(val *DatiDDT) *NullableDatiDDT {
	return &NullableDatiDDT{value: val, isSet: true}
}

func (v NullableDatiDDT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatiDDT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


