/*
Invoicetronic API

The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicetronicsdk

import (
	"encoding/json"
	"time"
)

// checks if the SendReduced type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendReduced{}

// SendReduced Reduced Send data for Update responses, containing only the essential fields.
type SendReduced struct {
	// SDI identifier.
	Identifier NullableString `json:"identifier,omitempty"`
	// VAT number of the Cedente/Prestatore (vendor).
	Prestatore NullableString `json:"prestatore,omitempty"`
	// Optional metadata, as json.
	MetaData map[string]string `json:"meta_data,omitempty"`
	// The invoices included in the payload.
	Documents []DocumentData `json:"documents,omitempty"`
	// When the invoice was sent to SDI.
	DateSent NullableTime `json:"date_sent,omitempty"`
}

// NewSendReduced instantiates a new SendReduced object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendReduced() *SendReduced {
	this := SendReduced{}
	return &this
}

// NewSendReducedWithDefaults instantiates a new SendReduced object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendReducedWithDefaults() *SendReduced {
	this := SendReduced{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SendReduced) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier.Get()) {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendReduced) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SendReduced) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *SendReduced) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}
// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *SendReduced) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *SendReduced) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetPrestatore returns the Prestatore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SendReduced) GetPrestatore() string {
	if o == nil || IsNil(o.Prestatore.Get()) {
		var ret string
		return ret
	}
	return *o.Prestatore.Get()
}

// GetPrestatoreOk returns a tuple with the Prestatore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendReduced) GetPrestatoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prestatore.Get(), o.Prestatore.IsSet()
}

// HasPrestatore returns a boolean if a field has been set.
func (o *SendReduced) HasPrestatore() bool {
	if o != nil && o.Prestatore.IsSet() {
		return true
	}

	return false
}

// SetPrestatore gets a reference to the given NullableString and assigns it to the Prestatore field.
func (o *SendReduced) SetPrestatore(v string) {
	o.Prestatore.Set(&v)
}
// SetPrestatoreNil sets the value for Prestatore to be an explicit nil
func (o *SendReduced) SetPrestatoreNil() {
	o.Prestatore.Set(nil)
}

// UnsetPrestatore ensures that no value is present for Prestatore, not even an explicit nil
func (o *SendReduced) UnsetPrestatore() {
	o.Prestatore.Unset()
}

// GetMetaData returns the MetaData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SendReduced) GetMetaData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendReduced) GetMetaDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return &o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *SendReduced) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]string and assigns it to the MetaData field.
func (o *SendReduced) SetMetaData(v map[string]string) {
	o.MetaData = v
}

// GetDocuments returns the Documents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SendReduced) GetDocuments() []DocumentData {
	if o == nil {
		var ret []DocumentData
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendReduced) GetDocumentsOk() ([]DocumentData, bool) {
	if o == nil || IsNil(o.Documents) {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *SendReduced) HasDocuments() bool {
	if o != nil && !IsNil(o.Documents) {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []DocumentData and assigns it to the Documents field.
func (o *SendReduced) SetDocuments(v []DocumentData) {
	o.Documents = v
}

// GetDateSent returns the DateSent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SendReduced) GetDateSent() time.Time {
	if o == nil || IsNil(o.DateSent.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateSent.Get()
}

// GetDateSentOk returns a tuple with the DateSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SendReduced) GetDateSentOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateSent.Get(), o.DateSent.IsSet()
}

// HasDateSent returns a boolean if a field has been set.
func (o *SendReduced) HasDateSent() bool {
	if o != nil && o.DateSent.IsSet() {
		return true
	}

	return false
}

// SetDateSent gets a reference to the given NullableTime and assigns it to the DateSent field.
func (o *SendReduced) SetDateSent(v time.Time) {
	o.DateSent.Set(&v)
}
// SetDateSentNil sets the value for DateSent to be an explicit nil
func (o *SendReduced) SetDateSentNil() {
	o.DateSent.Set(nil)
}

// UnsetDateSent ensures that no value is present for DateSent, not even an explicit nil
func (o *SendReduced) UnsetDateSent() {
	o.DateSent.Unset()
}

func (o SendReduced) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendReduced) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Identifier.IsSet() {
		toSerialize["identifier"] = o.Identifier.Get()
	}
	if o.Prestatore.IsSet() {
		toSerialize["prestatore"] = o.Prestatore.Get()
	}
	if o.MetaData != nil {
		toSerialize["meta_data"] = o.MetaData
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.DateSent.IsSet() {
		toSerialize["date_sent"] = o.DateSent.Get()
	}
	return toSerialize, nil
}

type NullableSendReduced struct {
	value *SendReduced
	isSet bool
}

func (v NullableSendReduced) Get() *SendReduced {
	return v.value
}

func (v *NullableSendReduced) Set(val *SendReduced) {
	v.value = val
	v.isSet = true
}

func (v NullableSendReduced) IsSet() bool {
	return v.isSet
}

func (v *NullableSendReduced) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendReduced(val *SendReduced) *NullableSendReduced {
	return &NullableSendReduced{value: val, isSet: true}
}

func (v NullableSendReduced) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendReduced) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


