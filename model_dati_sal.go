/*
Italian eInvoice API

The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1.0.0
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"encoding/json"
)

// checks if the DatiSAL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatiSAL{}

// DatiSAL struct for DatiSAL
type DatiSAL struct {
	RiferimentoFase *int32 `json:"riferimento_fase,omitempty"`
}

// NewDatiSAL instantiates a new DatiSAL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatiSAL() *DatiSAL {
	this := DatiSAL{}
	return &this
}

// NewDatiSALWithDefaults instantiates a new DatiSAL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatiSALWithDefaults() *DatiSAL {
	this := DatiSAL{}
	return &this
}

// GetRiferimentoFase returns the RiferimentoFase field value if set, zero value otherwise.
func (o *DatiSAL) GetRiferimentoFase() int32 {
	if o == nil || IsNil(o.RiferimentoFase) {
		var ret int32
		return ret
	}
	return *o.RiferimentoFase
}

// GetRiferimentoFaseOk returns a tuple with the RiferimentoFase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiSAL) GetRiferimentoFaseOk() (*int32, bool) {
	if o == nil || IsNil(o.RiferimentoFase) {
		return nil, false
	}
	return o.RiferimentoFase, true
}

// HasRiferimentoFase returns a boolean if a field has been set.
func (o *DatiSAL) HasRiferimentoFase() bool {
	if o != nil && !IsNil(o.RiferimentoFase) {
		return true
	}

	return false
}

// SetRiferimentoFase gets a reference to the given int32 and assigns it to the RiferimentoFase field.
func (o *DatiSAL) SetRiferimentoFase(v int32) {
	o.RiferimentoFase = &v
}

func (o DatiSAL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatiSAL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RiferimentoFase) {
		toSerialize["riferimento_fase"] = o.RiferimentoFase
	}
	return toSerialize, nil
}

type NullableDatiSAL struct {
	value *DatiSAL
	isSet bool
}

func (v NullableDatiSAL) Get() *DatiSAL {
	return v.value
}

func (v *NullableDatiSAL) Set(val *DatiSAL) {
	v.value = val
	v.isSet = true
}

func (v NullableDatiSAL) IsSet() bool {
	return v.isSet
}

func (v *NullableDatiSAL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatiSAL(val *DatiSAL) *NullableDatiSAL {
	return &NullableDatiSAL{value: val, isSet: true}
}

func (v NullableDatiSAL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatiSAL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


