/*
Italian eInvoice API v1

The [Italian eInvoice API][2] is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"encoding/json"
)

// checks if the Anagrafica type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Anagrafica{}

// Anagrafica struct for Anagrafica
type Anagrafica struct {
	Denominazione NullableString `json:"denominazione,omitempty"`
	Nome NullableString `json:"nome,omitempty"`
	Cognome NullableString `json:"cognome,omitempty"`
	Titolo NullableString `json:"titolo,omitempty"`
	CodEori NullableString `json:"cod_eori,omitempty"`
}

// NewAnagrafica instantiates a new Anagrafica object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnagrafica() *Anagrafica {
	this := Anagrafica{}
	return &this
}

// NewAnagraficaWithDefaults instantiates a new Anagrafica object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnagraficaWithDefaults() *Anagrafica {
	this := Anagrafica{}
	return &this
}

// GetDenominazione returns the Denominazione field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Anagrafica) GetDenominazione() string {
	if o == nil || IsNil(o.Denominazione.Get()) {
		var ret string
		return ret
	}
	return *o.Denominazione.Get()
}

// GetDenominazioneOk returns a tuple with the Denominazione field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Anagrafica) GetDenominazioneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Denominazione.Get(), o.Denominazione.IsSet()
}

// HasDenominazione returns a boolean if a field has been set.
func (o *Anagrafica) HasDenominazione() bool {
	if o != nil && o.Denominazione.IsSet() {
		return true
	}

	return false
}

// SetDenominazione gets a reference to the given NullableString and assigns it to the Denominazione field.
func (o *Anagrafica) SetDenominazione(v string) {
	o.Denominazione.Set(&v)
}
// SetDenominazioneNil sets the value for Denominazione to be an explicit nil
func (o *Anagrafica) SetDenominazioneNil() {
	o.Denominazione.Set(nil)
}

// UnsetDenominazione ensures that no value is present for Denominazione, not even an explicit nil
func (o *Anagrafica) UnsetDenominazione() {
	o.Denominazione.Unset()
}

// GetNome returns the Nome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Anagrafica) GetNome() string {
	if o == nil || IsNil(o.Nome.Get()) {
		var ret string
		return ret
	}
	return *o.Nome.Get()
}

// GetNomeOk returns a tuple with the Nome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Anagrafica) GetNomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nome.Get(), o.Nome.IsSet()
}

// HasNome returns a boolean if a field has been set.
func (o *Anagrafica) HasNome() bool {
	if o != nil && o.Nome.IsSet() {
		return true
	}

	return false
}

// SetNome gets a reference to the given NullableString and assigns it to the Nome field.
func (o *Anagrafica) SetNome(v string) {
	o.Nome.Set(&v)
}
// SetNomeNil sets the value for Nome to be an explicit nil
func (o *Anagrafica) SetNomeNil() {
	o.Nome.Set(nil)
}

// UnsetNome ensures that no value is present for Nome, not even an explicit nil
func (o *Anagrafica) UnsetNome() {
	o.Nome.Unset()
}

// GetCognome returns the Cognome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Anagrafica) GetCognome() string {
	if o == nil || IsNil(o.Cognome.Get()) {
		var ret string
		return ret
	}
	return *o.Cognome.Get()
}

// GetCognomeOk returns a tuple with the Cognome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Anagrafica) GetCognomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cognome.Get(), o.Cognome.IsSet()
}

// HasCognome returns a boolean if a field has been set.
func (o *Anagrafica) HasCognome() bool {
	if o != nil && o.Cognome.IsSet() {
		return true
	}

	return false
}

// SetCognome gets a reference to the given NullableString and assigns it to the Cognome field.
func (o *Anagrafica) SetCognome(v string) {
	o.Cognome.Set(&v)
}
// SetCognomeNil sets the value for Cognome to be an explicit nil
func (o *Anagrafica) SetCognomeNil() {
	o.Cognome.Set(nil)
}

// UnsetCognome ensures that no value is present for Cognome, not even an explicit nil
func (o *Anagrafica) UnsetCognome() {
	o.Cognome.Unset()
}

// GetTitolo returns the Titolo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Anagrafica) GetTitolo() string {
	if o == nil || IsNil(o.Titolo.Get()) {
		var ret string
		return ret
	}
	return *o.Titolo.Get()
}

// GetTitoloOk returns a tuple with the Titolo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Anagrafica) GetTitoloOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Titolo.Get(), o.Titolo.IsSet()
}

// HasTitolo returns a boolean if a field has been set.
func (o *Anagrafica) HasTitolo() bool {
	if o != nil && o.Titolo.IsSet() {
		return true
	}

	return false
}

// SetTitolo gets a reference to the given NullableString and assigns it to the Titolo field.
func (o *Anagrafica) SetTitolo(v string) {
	o.Titolo.Set(&v)
}
// SetTitoloNil sets the value for Titolo to be an explicit nil
func (o *Anagrafica) SetTitoloNil() {
	o.Titolo.Set(nil)
}

// UnsetTitolo ensures that no value is present for Titolo, not even an explicit nil
func (o *Anagrafica) UnsetTitolo() {
	o.Titolo.Unset()
}

// GetCodEori returns the CodEori field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Anagrafica) GetCodEori() string {
	if o == nil || IsNil(o.CodEori.Get()) {
		var ret string
		return ret
	}
	return *o.CodEori.Get()
}

// GetCodEoriOk returns a tuple with the CodEori field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Anagrafica) GetCodEoriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CodEori.Get(), o.CodEori.IsSet()
}

// HasCodEori returns a boolean if a field has been set.
func (o *Anagrafica) HasCodEori() bool {
	if o != nil && o.CodEori.IsSet() {
		return true
	}

	return false
}

// SetCodEori gets a reference to the given NullableString and assigns it to the CodEori field.
func (o *Anagrafica) SetCodEori(v string) {
	o.CodEori.Set(&v)
}
// SetCodEoriNil sets the value for CodEori to be an explicit nil
func (o *Anagrafica) SetCodEoriNil() {
	o.CodEori.Set(nil)
}

// UnsetCodEori ensures that no value is present for CodEori, not even an explicit nil
func (o *Anagrafica) UnsetCodEori() {
	o.CodEori.Unset()
}

func (o Anagrafica) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Anagrafica) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Denominazione.IsSet() {
		toSerialize["denominazione"] = o.Denominazione.Get()
	}
	if o.Nome.IsSet() {
		toSerialize["nome"] = o.Nome.Get()
	}
	if o.Cognome.IsSet() {
		toSerialize["cognome"] = o.Cognome.Get()
	}
	if o.Titolo.IsSet() {
		toSerialize["titolo"] = o.Titolo.Get()
	}
	if o.CodEori.IsSet() {
		toSerialize["cod_eori"] = o.CodEori.Get()
	}
	return toSerialize, nil
}

type NullableAnagrafica struct {
	value *Anagrafica
	isSet bool
}

func (v NullableAnagrafica) Get() *Anagrafica {
	return v.value
}

func (v *NullableAnagrafica) Set(val *Anagrafica) {
	v.value = val
	v.isSet = true
}

func (v NullableAnagrafica) IsSet() bool {
	return v.isSet
}

func (v *NullableAnagrafica) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnagrafica(val *Anagrafica) *NullableAnagrafica {
	return &NullableAnagrafica{value: val, isSet: true}
}

func (v NullableAnagrafica) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnagrafica) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


