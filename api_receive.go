/*
Italian eInvoice API

The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1.0.0
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// ReceiveAPIService ReceiveAPI service
type ReceiveAPIService service

type ApiInvoiceV1ReceiveGetRequest struct {
	ctx context.Context
	ApiService *ReceiveAPIService
	companyId *int32
	identifier *string
	unread *bool
	committente *string
	prestatore *string
	fileName *string
	lastUpdateFrom *time.Time
	lastUpdateTo *time.Time
	dateSentFrom *time.Time
	dateSentTo *time.Time
	documentDateFrom *time.Time
	documentDateTo *time.Time
	documentNumber *string
	page *int32
	pageSize *int32
}

// Company id.
func (r ApiInvoiceV1ReceiveGetRequest) CompanyId(companyId int32) ApiInvoiceV1ReceiveGetRequest {
	r.companyId = &companyId
	return r
}

// SDI identifier.
func (r ApiInvoiceV1ReceiveGetRequest) Identifier(identifier string) ApiInvoiceV1ReceiveGetRequest {
	r.identifier = &identifier
	return r
}

// Unread items only.
func (r ApiInvoiceV1ReceiveGetRequest) Unread(unread bool) ApiInvoiceV1ReceiveGetRequest {
	r.unread = &unread
	return r
}

// VAT number or fiscal code.
func (r ApiInvoiceV1ReceiveGetRequest) Committente(committente string) ApiInvoiceV1ReceiveGetRequest {
	r.committente = &committente
	return r
}

// VAT number or fiscal code.
func (r ApiInvoiceV1ReceiveGetRequest) Prestatore(prestatore string) ApiInvoiceV1ReceiveGetRequest {
	r.prestatore = &prestatore
	return r
}

// File name.
func (r ApiInvoiceV1ReceiveGetRequest) FileName(fileName string) ApiInvoiceV1ReceiveGetRequest {
	r.fileName = &fileName
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiInvoiceV1ReceiveGetRequest) LastUpdateFrom(lastUpdateFrom time.Time) ApiInvoiceV1ReceiveGetRequest {
	r.lastUpdateFrom = &lastUpdateFrom
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiInvoiceV1ReceiveGetRequest) LastUpdateTo(lastUpdateTo time.Time) ApiInvoiceV1ReceiveGetRequest {
	r.lastUpdateTo = &lastUpdateTo
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiInvoiceV1ReceiveGetRequest) DateSentFrom(dateSentFrom time.Time) ApiInvoiceV1ReceiveGetRequest {
	r.dateSentFrom = &dateSentFrom
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiInvoiceV1ReceiveGetRequest) DateSentTo(dateSentTo time.Time) ApiInvoiceV1ReceiveGetRequest {
	r.dateSentTo = &dateSentTo
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiInvoiceV1ReceiveGetRequest) DocumentDateFrom(documentDateFrom time.Time) ApiInvoiceV1ReceiveGetRequest {
	r.documentDateFrom = &documentDateFrom
	return r
}

// UTC ISO 8601 (2024-11-29T12:34:56Z)
func (r ApiInvoiceV1ReceiveGetRequest) DocumentDateTo(documentDateTo time.Time) ApiInvoiceV1ReceiveGetRequest {
	r.documentDateTo = &documentDateTo
	return r
}

// Document number.
func (r ApiInvoiceV1ReceiveGetRequest) DocumentNumber(documentNumber string) ApiInvoiceV1ReceiveGetRequest {
	r.documentNumber = &documentNumber
	return r
}

// Page number.
func (r ApiInvoiceV1ReceiveGetRequest) Page(page int32) ApiInvoiceV1ReceiveGetRequest {
	r.page = &page
	return r
}

// Items per page.
func (r ApiInvoiceV1ReceiveGetRequest) PageSize(pageSize int32) ApiInvoiceV1ReceiveGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInvoiceV1ReceiveGetRequest) Execute() ([]Receive, *http.Response, error) {
	return r.ApiService.InvoiceV1ReceiveGetExecute(r)
}

/*
InvoiceV1ReceiveGet List incoming invoices

Receive invoices are the invoices that are received from other companies.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInvoiceV1ReceiveGetRequest
*/
func (a *ReceiveAPIService) InvoiceV1ReceiveGet(ctx context.Context) ApiInvoiceV1ReceiveGetRequest {
	return ApiInvoiceV1ReceiveGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Receive
func (a *ReceiveAPIService) InvoiceV1ReceiveGetExecute(r ApiInvoiceV1ReceiveGetRequest) ([]Receive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Receive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiveAPIService.InvoiceV1ReceiveGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoice/v1/receive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company_id", r.companyId, "form", "")
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "form", "")
	}
	if r.unread != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unread", r.unread, "form", "")
	}
	if r.committente != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committente", r.committente, "form", "")
	}
	if r.prestatore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prestatore", r.prestatore, "form", "")
	}
	if r.fileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_name", r.fileName, "form", "")
	}
	if r.lastUpdateFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_update_from", r.lastUpdateFrom, "form", "")
	}
	if r.lastUpdateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_update_to", r.lastUpdateTo, "form", "")
	}
	if r.dateSentFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_sent_from", r.dateSentFrom, "form", "")
	}
	if r.dateSentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_sent_to", r.dateSentTo, "form", "")
	}
	if r.documentDateFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "document_date_from", r.documentDateFrom, "form", "")
	}
	if r.documentDateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "document_date_to", r.documentDateTo, "form", "")
	}
	if r.documentNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "document_number", r.documentNumber, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInvoiceV1ReceiveIdDeleteRequest struct {
	ctx context.Context
	ApiService *ReceiveAPIService
	id int32
}

func (r ApiInvoiceV1ReceiveIdDeleteRequest) Execute() (*Receive, *http.Response, error) {
	return r.ApiService.InvoiceV1ReceiveIdDeleteExecute(r)
}

/*
InvoiceV1ReceiveIdDelete Delete an incoming invoice by id

Receive invoices are the invoices that are received from other companies.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item id.
 @return ApiInvoiceV1ReceiveIdDeleteRequest
*/
func (a *ReceiveAPIService) InvoiceV1ReceiveIdDelete(ctx context.Context, id int32) ApiInvoiceV1ReceiveIdDeleteRequest {
	return ApiInvoiceV1ReceiveIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Receive
func (a *ReceiveAPIService) InvoiceV1ReceiveIdDeleteExecute(r ApiInvoiceV1ReceiveIdDeleteRequest) (*Receive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Receive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiveAPIService.InvoiceV1ReceiveIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoice/v1/receive/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInvoiceV1ReceiveIdGetRequest struct {
	ctx context.Context
	ApiService *ReceiveAPIService
	id int32
}

func (r ApiInvoiceV1ReceiveIdGetRequest) Execute() (*Receive, *http.Response, error) {
	return r.ApiService.InvoiceV1ReceiveIdGetExecute(r)
}

/*
InvoiceV1ReceiveIdGet Get an incoming invoice by id

Receive invoices are the invoices that are received from other companies.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item id.
 @return ApiInvoiceV1ReceiveIdGetRequest
*/
func (a *ReceiveAPIService) InvoiceV1ReceiveIdGet(ctx context.Context, id int32) ApiInvoiceV1ReceiveIdGetRequest {
	return ApiInvoiceV1ReceiveIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Receive
func (a *ReceiveAPIService) InvoiceV1ReceiveIdGetExecute(r ApiInvoiceV1ReceiveIdGetRequest) (*Receive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Receive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiveAPIService.InvoiceV1ReceiveIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoice/v1/receive/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
