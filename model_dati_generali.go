/*
Italian eInvoice API

The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1.0.0
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"encoding/json"
)

// checks if the DatiGenerali type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatiGenerali{}

// DatiGenerali struct for DatiGenerali
type DatiGenerali struct {
	DatiGeneraliDocumento *DatiGeneraliDocumento `json:"dati_generali_documento,omitempty"`
	DatiOrdineAcquisto []DatiOrdineAcquisto `json:"dati_ordine_acquisto,omitempty"`
	DatiContratto []DatiContratto `json:"dati_contratto,omitempty"`
	DatiConvenzione []DatiConvenzione `json:"dati_convenzione,omitempty"`
	DatiRicezione []DatiRicezione `json:"dati_ricezione,omitempty"`
	DatiFattureCollegate []DatiFattureCollegate `json:"dati_fatture_collegate,omitempty"`
	DatiSal []DatiSAL `json:"dati_sal,omitempty"`
	DatiDdt []DatiDDT `json:"dati_ddt,omitempty"`
	DatiTrasporto *DatiTrasporto `json:"dati_trasporto,omitempty"`
	FatturaPrincipale *FatturaPrincipale `json:"fattura_principale,omitempty"`
}

// NewDatiGenerali instantiates a new DatiGenerali object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatiGenerali() *DatiGenerali {
	this := DatiGenerali{}
	return &this
}

// NewDatiGeneraliWithDefaults instantiates a new DatiGenerali object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatiGeneraliWithDefaults() *DatiGenerali {
	this := DatiGenerali{}
	return &this
}

// GetDatiGeneraliDocumento returns the DatiGeneraliDocumento field value if set, zero value otherwise.
func (o *DatiGenerali) GetDatiGeneraliDocumento() DatiGeneraliDocumento {
	if o == nil || IsNil(o.DatiGeneraliDocumento) {
		var ret DatiGeneraliDocumento
		return ret
	}
	return *o.DatiGeneraliDocumento
}

// GetDatiGeneraliDocumentoOk returns a tuple with the DatiGeneraliDocumento field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiGenerali) GetDatiGeneraliDocumentoOk() (*DatiGeneraliDocumento, bool) {
	if o == nil || IsNil(o.DatiGeneraliDocumento) {
		return nil, false
	}
	return o.DatiGeneraliDocumento, true
}

// HasDatiGeneraliDocumento returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiGeneraliDocumento() bool {
	if o != nil && !IsNil(o.DatiGeneraliDocumento) {
		return true
	}

	return false
}

// SetDatiGeneraliDocumento gets a reference to the given DatiGeneraliDocumento and assigns it to the DatiGeneraliDocumento field.
func (o *DatiGenerali) SetDatiGeneraliDocumento(v DatiGeneraliDocumento) {
	o.DatiGeneraliDocumento = &v
}

// GetDatiOrdineAcquisto returns the DatiOrdineAcquisto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiOrdineAcquisto() []DatiOrdineAcquisto {
	if o == nil {
		var ret []DatiOrdineAcquisto
		return ret
	}
	return o.DatiOrdineAcquisto
}

// GetDatiOrdineAcquistoOk returns a tuple with the DatiOrdineAcquisto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiOrdineAcquistoOk() ([]DatiOrdineAcquisto, bool) {
	if o == nil || IsNil(o.DatiOrdineAcquisto) {
		return nil, false
	}
	return o.DatiOrdineAcquisto, true
}

// HasDatiOrdineAcquisto returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiOrdineAcquisto() bool {
	if o != nil && !IsNil(o.DatiOrdineAcquisto) {
		return true
	}

	return false
}

// SetDatiOrdineAcquisto gets a reference to the given []DatiOrdineAcquisto and assigns it to the DatiOrdineAcquisto field.
func (o *DatiGenerali) SetDatiOrdineAcquisto(v []DatiOrdineAcquisto) {
	o.DatiOrdineAcquisto = v
}

// GetDatiContratto returns the DatiContratto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiContratto() []DatiContratto {
	if o == nil {
		var ret []DatiContratto
		return ret
	}
	return o.DatiContratto
}

// GetDatiContrattoOk returns a tuple with the DatiContratto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiContrattoOk() ([]DatiContratto, bool) {
	if o == nil || IsNil(o.DatiContratto) {
		return nil, false
	}
	return o.DatiContratto, true
}

// HasDatiContratto returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiContratto() bool {
	if o != nil && !IsNil(o.DatiContratto) {
		return true
	}

	return false
}

// SetDatiContratto gets a reference to the given []DatiContratto and assigns it to the DatiContratto field.
func (o *DatiGenerali) SetDatiContratto(v []DatiContratto) {
	o.DatiContratto = v
}

// GetDatiConvenzione returns the DatiConvenzione field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiConvenzione() []DatiConvenzione {
	if o == nil {
		var ret []DatiConvenzione
		return ret
	}
	return o.DatiConvenzione
}

// GetDatiConvenzioneOk returns a tuple with the DatiConvenzione field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiConvenzioneOk() ([]DatiConvenzione, bool) {
	if o == nil || IsNil(o.DatiConvenzione) {
		return nil, false
	}
	return o.DatiConvenzione, true
}

// HasDatiConvenzione returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiConvenzione() bool {
	if o != nil && !IsNil(o.DatiConvenzione) {
		return true
	}

	return false
}

// SetDatiConvenzione gets a reference to the given []DatiConvenzione and assigns it to the DatiConvenzione field.
func (o *DatiGenerali) SetDatiConvenzione(v []DatiConvenzione) {
	o.DatiConvenzione = v
}

// GetDatiRicezione returns the DatiRicezione field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiRicezione() []DatiRicezione {
	if o == nil {
		var ret []DatiRicezione
		return ret
	}
	return o.DatiRicezione
}

// GetDatiRicezioneOk returns a tuple with the DatiRicezione field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiRicezioneOk() ([]DatiRicezione, bool) {
	if o == nil || IsNil(o.DatiRicezione) {
		return nil, false
	}
	return o.DatiRicezione, true
}

// HasDatiRicezione returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiRicezione() bool {
	if o != nil && !IsNil(o.DatiRicezione) {
		return true
	}

	return false
}

// SetDatiRicezione gets a reference to the given []DatiRicezione and assigns it to the DatiRicezione field.
func (o *DatiGenerali) SetDatiRicezione(v []DatiRicezione) {
	o.DatiRicezione = v
}

// GetDatiFattureCollegate returns the DatiFattureCollegate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiFattureCollegate() []DatiFattureCollegate {
	if o == nil {
		var ret []DatiFattureCollegate
		return ret
	}
	return o.DatiFattureCollegate
}

// GetDatiFattureCollegateOk returns a tuple with the DatiFattureCollegate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiFattureCollegateOk() ([]DatiFattureCollegate, bool) {
	if o == nil || IsNil(o.DatiFattureCollegate) {
		return nil, false
	}
	return o.DatiFattureCollegate, true
}

// HasDatiFattureCollegate returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiFattureCollegate() bool {
	if o != nil && !IsNil(o.DatiFattureCollegate) {
		return true
	}

	return false
}

// SetDatiFattureCollegate gets a reference to the given []DatiFattureCollegate and assigns it to the DatiFattureCollegate field.
func (o *DatiGenerali) SetDatiFattureCollegate(v []DatiFattureCollegate) {
	o.DatiFattureCollegate = v
}

// GetDatiSal returns the DatiSal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiSal() []DatiSAL {
	if o == nil {
		var ret []DatiSAL
		return ret
	}
	return o.DatiSal
}

// GetDatiSalOk returns a tuple with the DatiSal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiSalOk() ([]DatiSAL, bool) {
	if o == nil || IsNil(o.DatiSal) {
		return nil, false
	}
	return o.DatiSal, true
}

// HasDatiSal returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiSal() bool {
	if o != nil && !IsNil(o.DatiSal) {
		return true
	}

	return false
}

// SetDatiSal gets a reference to the given []DatiSAL and assigns it to the DatiSal field.
func (o *DatiGenerali) SetDatiSal(v []DatiSAL) {
	o.DatiSal = v
}

// GetDatiDdt returns the DatiDdt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatiGenerali) GetDatiDdt() []DatiDDT {
	if o == nil {
		var ret []DatiDDT
		return ret
	}
	return o.DatiDdt
}

// GetDatiDdtOk returns a tuple with the DatiDdt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatiGenerali) GetDatiDdtOk() ([]DatiDDT, bool) {
	if o == nil || IsNil(o.DatiDdt) {
		return nil, false
	}
	return o.DatiDdt, true
}

// HasDatiDdt returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiDdt() bool {
	if o != nil && !IsNil(o.DatiDdt) {
		return true
	}

	return false
}

// SetDatiDdt gets a reference to the given []DatiDDT and assigns it to the DatiDdt field.
func (o *DatiGenerali) SetDatiDdt(v []DatiDDT) {
	o.DatiDdt = v
}

// GetDatiTrasporto returns the DatiTrasporto field value if set, zero value otherwise.
func (o *DatiGenerali) GetDatiTrasporto() DatiTrasporto {
	if o == nil || IsNil(o.DatiTrasporto) {
		var ret DatiTrasporto
		return ret
	}
	return *o.DatiTrasporto
}

// GetDatiTrasportoOk returns a tuple with the DatiTrasporto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiGenerali) GetDatiTrasportoOk() (*DatiTrasporto, bool) {
	if o == nil || IsNil(o.DatiTrasporto) {
		return nil, false
	}
	return o.DatiTrasporto, true
}

// HasDatiTrasporto returns a boolean if a field has been set.
func (o *DatiGenerali) HasDatiTrasporto() bool {
	if o != nil && !IsNil(o.DatiTrasporto) {
		return true
	}

	return false
}

// SetDatiTrasporto gets a reference to the given DatiTrasporto and assigns it to the DatiTrasporto field.
func (o *DatiGenerali) SetDatiTrasporto(v DatiTrasporto) {
	o.DatiTrasporto = &v
}

// GetFatturaPrincipale returns the FatturaPrincipale field value if set, zero value otherwise.
func (o *DatiGenerali) GetFatturaPrincipale() FatturaPrincipale {
	if o == nil || IsNil(o.FatturaPrincipale) {
		var ret FatturaPrincipale
		return ret
	}
	return *o.FatturaPrincipale
}

// GetFatturaPrincipaleOk returns a tuple with the FatturaPrincipale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatiGenerali) GetFatturaPrincipaleOk() (*FatturaPrincipale, bool) {
	if o == nil || IsNil(o.FatturaPrincipale) {
		return nil, false
	}
	return o.FatturaPrincipale, true
}

// HasFatturaPrincipale returns a boolean if a field has been set.
func (o *DatiGenerali) HasFatturaPrincipale() bool {
	if o != nil && !IsNil(o.FatturaPrincipale) {
		return true
	}

	return false
}

// SetFatturaPrincipale gets a reference to the given FatturaPrincipale and assigns it to the FatturaPrincipale field.
func (o *DatiGenerali) SetFatturaPrincipale(v FatturaPrincipale) {
	o.FatturaPrincipale = &v
}

func (o DatiGenerali) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatiGenerali) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatiGeneraliDocumento) {
		toSerialize["dati_generali_documento"] = o.DatiGeneraliDocumento
	}
	if o.DatiOrdineAcquisto != nil {
		toSerialize["dati_ordine_acquisto"] = o.DatiOrdineAcquisto
	}
	if o.DatiContratto != nil {
		toSerialize["dati_contratto"] = o.DatiContratto
	}
	if o.DatiConvenzione != nil {
		toSerialize["dati_convenzione"] = o.DatiConvenzione
	}
	if o.DatiRicezione != nil {
		toSerialize["dati_ricezione"] = o.DatiRicezione
	}
	if o.DatiFattureCollegate != nil {
		toSerialize["dati_fatture_collegate"] = o.DatiFattureCollegate
	}
	if o.DatiSal != nil {
		toSerialize["dati_sal"] = o.DatiSal
	}
	if o.DatiDdt != nil {
		toSerialize["dati_ddt"] = o.DatiDdt
	}
	if !IsNil(o.DatiTrasporto) {
		toSerialize["dati_trasporto"] = o.DatiTrasporto
	}
	if !IsNil(o.FatturaPrincipale) {
		toSerialize["fattura_principale"] = o.FatturaPrincipale
	}
	return toSerialize, nil
}

type NullableDatiGenerali struct {
	value *DatiGenerali
	isSet bool
}

func (v NullableDatiGenerali) Get() *DatiGenerali {
	return v.value
}

func (v *NullableDatiGenerali) Set(val *DatiGenerali) {
	v.value = val
	v.isSet = true
}

func (v NullableDatiGenerali) IsSet() bool {
	return v.isSet
}

func (v *NullableDatiGenerali) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatiGenerali(val *DatiGenerali) *NullableDatiGenerali {
	return &NullableDatiGenerali{value: val, isSet: true}
}

func (v NullableDatiGenerali) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatiGenerali) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


