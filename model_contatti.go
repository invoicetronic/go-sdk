/*
Italian eInvoice API

The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1.0.0
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"encoding/json"
)

// checks if the Contatti type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contatti{}

// Contatti struct for Contatti
type Contatti struct {
	Telefono NullableString `json:"telefono,omitempty"`
	Fax NullableString `json:"fax,omitempty"`
	Email NullableString `json:"email,omitempty"`
}

// NewContatti instantiates a new Contatti object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContatti() *Contatti {
	this := Contatti{}
	return &this
}

// NewContattiWithDefaults instantiates a new Contatti object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContattiWithDefaults() *Contatti {
	this := Contatti{}
	return &this
}

// GetTelefono returns the Telefono field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contatti) GetTelefono() string {
	if o == nil || IsNil(o.Telefono.Get()) {
		var ret string
		return ret
	}
	return *o.Telefono.Get()
}

// GetTelefonoOk returns a tuple with the Telefono field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contatti) GetTelefonoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Telefono.Get(), o.Telefono.IsSet()
}

// HasTelefono returns a boolean if a field has been set.
func (o *Contatti) HasTelefono() bool {
	if o != nil && o.Telefono.IsSet() {
		return true
	}

	return false
}

// SetTelefono gets a reference to the given NullableString and assigns it to the Telefono field.
func (o *Contatti) SetTelefono(v string) {
	o.Telefono.Set(&v)
}
// SetTelefonoNil sets the value for Telefono to be an explicit nil
func (o *Contatti) SetTelefonoNil() {
	o.Telefono.Set(nil)
}

// UnsetTelefono ensures that no value is present for Telefono, not even an explicit nil
func (o *Contatti) UnsetTelefono() {
	o.Telefono.Unset()
}

// GetFax returns the Fax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contatti) GetFax() string {
	if o == nil || IsNil(o.Fax.Get()) {
		var ret string
		return ret
	}
	return *o.Fax.Get()
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contatti) GetFaxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fax.Get(), o.Fax.IsSet()
}

// HasFax returns a boolean if a field has been set.
func (o *Contatti) HasFax() bool {
	if o != nil && o.Fax.IsSet() {
		return true
	}

	return false
}

// SetFax gets a reference to the given NullableString and assigns it to the Fax field.
func (o *Contatti) SetFax(v string) {
	o.Fax.Set(&v)
}
// SetFaxNil sets the value for Fax to be an explicit nil
func (o *Contatti) SetFaxNil() {
	o.Fax.Set(nil)
}

// UnsetFax ensures that no value is present for Fax, not even an explicit nil
func (o *Contatti) UnsetFax() {
	o.Fax.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contatti) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contatti) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *Contatti) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *Contatti) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *Contatti) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *Contatti) UnsetEmail() {
	o.Email.Unset()
}

func (o Contatti) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contatti) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Telefono.IsSet() {
		toSerialize["telefono"] = o.Telefono.Get()
	}
	if o.Fax.IsSet() {
		toSerialize["fax"] = o.Fax.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	return toSerialize, nil
}

type NullableContatti struct {
	value *Contatti
	isSet bool
}

func (v NullableContatti) Get() *Contatti {
	return v.value
}

func (v *NullableContatti) Set(val *Contatti) {
	v.value = val
	v.isSet = true
}

func (v NullableContatti) IsSet() bool {
	return v.isSet
}

func (v *NullableContatti) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContatti(val *Contatti) *NullableContatti {
	return &NullableContatti{value: val, isSet: true}
}

func (v NullableContatti) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContatti) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


