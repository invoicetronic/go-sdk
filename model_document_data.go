/*
Italian eInvoice API

The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1.0.0
Contact: support@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicesdk

import (
	"encoding/json"
	"time"
)

// checks if the DocumentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentData{}

// DocumentData struct for DocumentData
type DocumentData struct {
	Number NullableString `json:"number,omitempty"`
	Date *time.Time `json:"date,omitempty"`
}

// NewDocumentData instantiates a new DocumentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentData() *DocumentData {
	this := DocumentData{}
	return &this
}

// NewDocumentDataWithDefaults instantiates a new DocumentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDataWithDefaults() *DocumentData {
	this := DocumentData{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetNumber() string {
	if o == nil || IsNil(o.Number.Get()) {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *DocumentData) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *DocumentData) SetNumber(v string) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *DocumentData) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *DocumentData) UnsetNumber() {
	o.Number.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DocumentData) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentData) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DocumentData) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *DocumentData) SetDate(v time.Time) {
	o.Date = &v
}

func (o DocumentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableDocumentData struct {
	value *DocumentData
	isSet bool
}

func (v NullableDocumentData) Get() *DocumentData {
	return v.value
}

func (v *NullableDocumentData) Set(val *DocumentData) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentData) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentData(val *DocumentData) *NullableDocumentData {
	return &NullableDocumentData{value: val, isSet: true}
}

func (v NullableDocumentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


