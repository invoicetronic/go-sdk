/*
Invoicetronic API

The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

API version: 1
Contact: info@invoicetronic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoicetronicsdk

import (
	"encoding/json"
)

// checks if the Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status{}

// Status struct for Status
type Status struct {
	// Operations (invoices and validations) left.
	OperationLeft *int32 `json:"operation_left,omitempty"`
	// Signatures left.
	SignatureLeft *int32 `json:"signature_left,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetOperationLeft returns the OperationLeft field value if set, zero value otherwise.
func (o *Status) GetOperationLeft() int32 {
	if o == nil || IsNil(o.OperationLeft) {
		var ret int32
		return ret
	}
	return *o.OperationLeft
}

// GetOperationLeftOk returns a tuple with the OperationLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetOperationLeftOk() (*int32, bool) {
	if o == nil || IsNil(o.OperationLeft) {
		return nil, false
	}
	return o.OperationLeft, true
}

// HasOperationLeft returns a boolean if a field has been set.
func (o *Status) HasOperationLeft() bool {
	if o != nil && !IsNil(o.OperationLeft) {
		return true
	}

	return false
}

// SetOperationLeft gets a reference to the given int32 and assigns it to the OperationLeft field.
func (o *Status) SetOperationLeft(v int32) {
	o.OperationLeft = &v
}

// GetSignatureLeft returns the SignatureLeft field value if set, zero value otherwise.
func (o *Status) GetSignatureLeft() int32 {
	if o == nil || IsNil(o.SignatureLeft) {
		var ret int32
		return ret
	}
	return *o.SignatureLeft
}

// GetSignatureLeftOk returns a tuple with the SignatureLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetSignatureLeftOk() (*int32, bool) {
	if o == nil || IsNil(o.SignatureLeft) {
		return nil, false
	}
	return o.SignatureLeft, true
}

// HasSignatureLeft returns a boolean if a field has been set.
func (o *Status) HasSignatureLeft() bool {
	if o != nil && !IsNil(o.SignatureLeft) {
		return true
	}

	return false
}

// SetSignatureLeft gets a reference to the given int32 and assigns it to the SignatureLeft field.
func (o *Status) SetSignatureLeft(v int32) {
	o.SignatureLeft = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperationLeft) {
		toSerialize["operation_left"] = o.OperationLeft
	}
	if !IsNil(o.SignatureLeft) {
		toSerialize["signature_left"] = o.SignatureLeft
	}
	return toSerialize, nil
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


